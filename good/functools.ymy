def map :: (Int -> Int) -> [Int] -> Int -> [Int] (f :: Int -> Int, a :: [Int], len :: Int): {
    i :: Int;
    i = 0;
    for i = 0; i < len; i++: 
        a[i] = f(a[i]);
    
    return a;
}

def reduce :: (Int -> Int -> Int) -> [Int] -> Int -> Int (f :: Int -> Int -> Int, a :: [Int], len :: Int): {
        acc :: Int; 
        acc = a[0];
        i :: Int; 
        for i = 1; i < len; i++: 
            acc = f(a[i], acc);

        return acc;
}

def filter :: (Int -> Bool) -> [Int] -> Int -> [Int] (predicate :: Int -> Bool, a :: [Int], len :: Int): {
    res :: [Int]; 
    res = [];
    i :: Int; 
    for i = 0; i < len; i++: 
        if predicate(a[i]):
            res += [a[i]];
    
    return res;
}




a :: [Int];
a = [1, 2, 3, 4, 5];
len :: Int;
len = 5;
print "a:"; 
print a; 

print "sum: ";
print reduce(lambda x :: Int, acc :: Int: x + acc, a, len);

print "a^2:";
a = map (lambda x :: Int : x * x, a, len); 
print a; 

print "a*3 ";
a = map (lambda x :: Int : x * 3, a, len);
print a; 

print "Even elements: ";
print filter (lambda x :: Int : x % 2 == 0, a, len);

